var documenterSearchIndex = {"docs":
[{"location":"lib/internals/#Developer-Documentation","page":"Developer Documentation","title":"Developer Documentation","text":"","category":"section"},{"location":"lib/internals/","page":"Developer Documentation","title":"Developer Documentation","text":"This is the developer's usage of the module.","category":"page"},{"location":"man/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Here is how to contribute to the development of the module.","category":"page"},{"location":"man/guide/#Package-Guide","page":"Package Guide","title":"Package Guide","text":"","category":"section"},{"location":"man/guide/#Installation","page":"Package Guide","title":"Installation","text":"","category":"section"},{"location":"man/guide/","page":"Package Guide","title":"Package Guide","text":"The AdaptiveResonance package can be installed using the Julia package manager. From the Julia REPL, type ']' to enterh the Pkg REPL mode and run","category":"page"},{"location":"man/guide/","page":"Package Guide","title":"Package Guide","text":"pkg> add AdaptiveResonance","category":"page"},{"location":"man/guide/","page":"Package Guide","title":"Package Guide","text":"Alternatively, it can be added to/ your environment in a script with","category":"page"},{"location":"man/guide/","page":"Package Guide","title":"Package Guide","text":"using Pkg\nPkg.add(\"AdaptiveResonance\")","category":"page"},{"location":"man/syntax/#Syntax","page":"Syntax","title":"Syntax","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This is the syntax of the module.","category":"page"},{"location":"lib/public/#Public-Usage","page":"Public Usage","title":"Public Usage","text":"","category":"section"},{"location":"lib/public/","page":"Public Usage","title":"Public Usage","text":"This is the public usage of the module.","category":"page"},{"location":"#AdaptiveResonance.jl","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"","category":"section"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"The Package Guide provides a tutorial explaining how to get started using Documenter.","category":"page"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Some examples of packages using Documenter can be found on the Examples page.","category":"page"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"#Manual-Outline","page":"AdaptiveResonance.jl","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Pages = [\n    \"man/guide.md\",\n    \"man/examples.md\",\n    \"man/syntax.md\",\n    \"man/contributing.md\"\n]\nDepth = 1","category":"page"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"<!– This is how you use the module manually. –>","category":"page"},{"location":"#Library-Outline","page":"AdaptiveResonance.jl","title":"Library Outline","text":"","category":"section"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"<!– This is how you develop the library. –>","category":"page"},{"location":"#main-index","page":"AdaptiveResonance.jl","title":"Index","text":"","category":"section"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Pages = [\"lib/public.md\"]","category":"page"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Modules = [AdaptiveResonance]","category":"page"},{"location":"#AdaptiveResonance.DDVFA","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.DDVFA","text":"DDVFA()\n\nImplements a DDVFA learner.\n\n# Examples\n```julia-repl\njulia> DDVFA()\nDDVFA\n    opts: opts_DDVFA\n    supopts: opts_GNFA\n    ...\n```\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.GNFA","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.GNFA","text":"GNFA\n\nGamma-Normalized Fuzzy ART learner struct\n\n# Examples\n```julia-repl\njulia> GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\n```\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.GNFA-Tuple{Any}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.GNFA","text":"GNFA(opts)\n\nImplements a Gamma-Normalized Fuzzy ART learner with specified options.\n\n# Examples\n```julia-repl\njulia> GNFA(opts)\nGNFA\n    opts: opts_GNFA\n    ...\n```\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.GNFA-Tuple{}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.GNFA","text":"GNFA()\n\nImplements a Gamma-Normalized Fuzzy ART learner.\n\n# Examples\n```julia-repl\njulia> GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\n```\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.opts_DDVFA","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.opts_DDVFA","text":"opts_DDVFA()\n\nDistributed Dual Vigilance Fuzzy ART options struct.\n\n# Examples\n```julia-repl\njulia> opts_DDVFA()\nInitialized opts_DDVFA\n```\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.opts_GNFA","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.opts_GNFA","text":"opts_GNFA()\n\nGamma-Normalized Fuzzy ART options struct.\n\n# Examples\n```julia-repl\njulia> opts_GNFA()\nInitialized GNFA\n```\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.activation_match!-Tuple{GNFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.activation_match!","text":"activation_match!(art::GNFA, x::Array)\n\nComputes the activationa and match functions of the art module against sample x.\n\n# Examples\n```julia-repl\njulia> my_GNFA = GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\njulia> x, y = load_data()\njulia> train!(my_GNFA, x)\njulia> x_sample = x[:, 1]\njulia> activation_match!(my_GNFA, x_sample)\n```\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.classify-Tuple{GNFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.classify","text":"classify(art::GNFA, x::Array)\n\nPredict categories of 'x' using the GNFA model.\n\nReturns predicted categories 'y_hat'\n\n# Examples\n```julia-repl\njulia> my_GNFA = GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\njulia> x, y = load_data()\njulia> train!(my_GNFA, x)\njulia> y_hat = classify(my_GNFA, y)\n```\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.complement_code-Tuple{Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.complement_code","text":"complement_code(data)\n\nNormalize the data x to [0, 1] and returns the augmented vector [x, 1 - x].\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.doGreet-Tuple{Any}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.doGreet","text":"doGreet(name)\n\nGreets the name given.\n\nExamples\n\njulia> doGreet(\"Julia\")\nHello Julia!\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.foo-Tuple{Any,Any}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.foo","text":"foo(a, b)\n\nThe ubiquitous foo function to verify basic functionality in tests.     Returns a + b\n\nExamples\n\njulia> foo(1, 2)\n3\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.get_field_meta-Tuple{Any,String}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.get_field_meta","text":"get_field_meta(obj, field_name)\n\nGet the value of a struct's field using meta programming.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.get_field_native-Tuple{Any,String}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.get_field_native","text":"get_field_native(obj, field_name)\n\nGet the value of a struct's field through the julia native method.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.greet-Tuple{}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.greet","text":"greet()\n\nPrint a hello world!\n\nExamples\n\njulia> greet()\nHello World!\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.initialize!-Tuple{GNFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.initialize!","text":"initialize!()\n\nInitializes a GNFA learner with an intial sample 'x'\n\n# Examples\n```julia-repl\njulia> my_GNFA = GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\njulia> initialize!(my_GNFA, [1 2 3 4])\n```\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.my_f-Tuple{Any,Any}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.my_f","text":"my_f(x, y)\n\nBasic inline function to verify basic functionality in tests.     Returns 2 * x + y\n\nExamples\n\njulia> my_f(2, 1)\n5\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.similarity-Tuple{String,Any,String,Any,AbstractFloat}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.similarity","text":"similarity(method, F2, field_name, gamma_ref)\n\nCompute the similarity metric depending on method with explicit comparisons for the field name.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.similarity-Tuple{String,GNFA,String,Array,AbstractFloat}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.similarity","text":"similarity(method, F2, field_name, gamma_ref)\n\nCompute the similarity metric depending on method with explicit comparisons for the field name.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.similarity_meta-Tuple{String,Any,String,AbstractFloat}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.similarity_meta","text":"similarity_meta(method, F2, field_name, gamma_ref)\n\nCompute the similarity metric depending on method using meta programming to access the correct field.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.similarity_meta-Tuple{String,GNFA,String,AbstractFloat}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.similarity_meta","text":"similarity_meta(method, F2, field_name, gamma_ref)\n\nCompute the similarity metric depending on method using meta programming to access the correct field.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.train!-Tuple{DDVFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.train!","text":"train!(ddvfa, data)\n\nTrain the DDVFA model on the data.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.train!-Tuple{GNFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.train!","text":"train!()\n\nTrains a GNFA learner with dataset 'x' and optional labels 'y'\n\n# Examples\n```julia-repl\njulia> my_GNFA = GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\njulia> x = load_data()\njulia> train!(my_GNFA, x)\n```\n\n\n\n\n\n","category":"method"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"<!– @index –>","category":"page"},{"location":"man/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Here are some helpful examples of the usage of the module.","category":"page"},{"location":"man/examples/#Example-1:","page":"Examples","title":"Example 1:","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"art = DDVFA()","category":"page"},{"location":"man/examples/#Example-2:","page":"Examples","title":"Example 2:","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"art = SFAM()","category":"page"}]
}
