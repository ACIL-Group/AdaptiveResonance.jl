var documenterSearchIndex = {"docs":
[{"location":"lib/internals/#Developer-Documentation","page":"Developer Documentation","title":"Developer Documentation","text":"","category":"section"},{"location":"lib/internals/","page":"Developer Documentation","title":"Developer Documentation","text":"This is the developer's usage of the module.","category":"page"},{"location":"man/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Here is how to contribute to the development of the module.","category":"page"},{"location":"man/guide/#Package-Guide","page":"Package Guide","title":"Package Guide","text":"","category":"section"},{"location":"man/guide/#Installation","page":"Package Guide","title":"Installation","text":"","category":"section"},{"location":"man/guide/","page":"Package Guide","title":"Package Guide","text":"The AdaptiveResonance package can be installed using the Julia package manager. From the Julia REPL, type ']' to enter the Pkg REPL mode and run","category":"page"},{"location":"man/guide/","page":"Package Guide","title":"Package Guide","text":"pkg> add AdaptiveResonance","category":"page"},{"location":"man/guide/","page":"Package Guide","title":"Package Guide","text":"Alternatively, it can be added to/ your environment in a script with","category":"page"},{"location":"man/guide/","page":"Package Guide","title":"Package Guide","text":"using Pkg\nPkg.add(\"AdaptiveResonance\")","category":"page"},{"location":"man/syntax/#Syntax","page":"Syntax","title":"Syntax","text":"","category":"section"},{"location":"man/syntax/","page":"Syntax","title":"Syntax","text":"This is the syntax of the module.","category":"page"},{"location":"lib/public/#Public-Usage","page":"Public Usage","title":"Public Usage","text":"","category":"section"},{"location":"lib/public/","page":"Public Usage","title":"Public Usage","text":"This is the public usage of the module.","category":"page"},{"location":"#AdaptiveResonance.jl","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"","category":"section"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"The Package Guide provides a tutorial explaining how to get started using Documenter.","category":"page"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Some examples of packages using Documenter can be found on the Examples page.","category":"page"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"#Manual-Outline","page":"AdaptiveResonance.jl","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Pages = [\n    \"man/guide.md\",\n    \"man/examples.md\",\n    \"man/syntax.md\",\n    \"man/contributing.md\"\n]\nDepth = 1","category":"page"},{"location":"#Library-Outline","page":"AdaptiveResonance.jl","title":"Library Outline","text":"","category":"section"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"#main-index","page":"AdaptiveResonance.jl","title":"Index","text":"","category":"section"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Pages = [\"lib/public.md\"]","category":"page"},{"location":"","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.jl","text":"Modules = [AdaptiveResonance]","category":"page"},{"location":"#AdaptiveResonance.DAM","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.DAM","text":"DAM\n\nDefault ARTMAP struct.\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.DAM-Tuple{opts_DAM}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.DAM","text":"DAM(opts)\n\nImplements a Default ARTMAP learner with specified options\n\nExamples\n\njulia> opts = opts_DAM()\njulia> DAM(opts)\nDAM\n    opts: opts_DAM\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.DAM-Tuple{}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.DAM","text":"DAM()\n\nImplements a Default ARTMAP learner.\n\nExamples\n\njulia> DAM()\nDAM\n    opts: opts_DAM\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.DDVFA","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.DDVFA","text":"DDVFA\n\nDistributed Dual Vigilance Fuzzy ARTMAP module struct.\n\nExamples\n\njulia> DDVFA()\nDDVFA\n    opts: opts_DDVFA\n    supopts::opts_GNFA\n    ...\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.DDVFA-Tuple{opts_DDVFA}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.DDVFA","text":"DDVFA(opts::opts_DDVFA)\n\nImplements a DDVFA learner with specified options.\n\nExamples\n\njulia> my_opts = opts_DDVFA()\njulia> DDVFA(my_opts)\nDDVFA\n    opts: opts_DDVFA\n    supopts: opts_GNFA\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.DDVFA-Tuple{}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.DDVFA","text":"DDVFA()\n\nImplements a DDVFA learner.\n\nExamples\n\njulia> DDVFA()\nDDVFA\n    opts: opts_DDVFA\n    supopts: opts_GNFA\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.FAM","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.FAM","text":"FAM\n\nFuzzy ARTMAP struct.\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.FAM-Tuple{opts_FAM}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.FAM","text":"FAM(opts)\n\nImplements a Fuzzy ARTMAP learner with specified options.\n\nExamples\n\njulia> opts = opts_FAM()\njulia> FAM(opts)\nFAM\n    opts: opts_FAM\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.FAM-Tuple{}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.FAM","text":"FAM()\n\nImplements a Fuzzy ARTMAP learner.\n\nExamples\n\njulia> FAM()\nFAM\n    opts: opts_FAM\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.GNFA","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.GNFA","text":"GNFA\n\nGamma-Normalized Fuzzy ART learner struct\n\nExamples\n\njulia> GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.GNFA-Tuple{Any}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.GNFA","text":"GNFA(opts)\n\nImplements a Gamma-Normalized Fuzzy ART learner with specified options.\n\nExamples\n\njulia> GNFA(opts)\nGNFA\n    opts: opts_GNFA\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.GNFA-Tuple{}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.GNFA","text":"GNFA()\n\nImplements a Gamma-Normalized Fuzzy ART learner.\n\nExamples\n\njulia> GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.SFAM","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.SFAM","text":"SFAM\n\nSimple Fuzzy ARTMAP struct.\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.SFAM-Tuple{opts_SFAM}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.SFAM","text":"SFAM(opts)\n\nImplements a Simple Fuzzy ARTMAP learner with specified options.\n\nExamples\n\njulia> opts = opts_SFAM()\njulia> SFAM(opts)\nSFAM\n    opts: opts_SFAM\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.SFAM-Tuple{}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.SFAM","text":"SFAM()\n\nImplements a Simple Fuzzy ARTMAP learner.\n\nExamples\n\njulia> SFAM()\nSFAM\n    opts: opts_SFAM\n    ...\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.opts_DAM","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.opts_DAM","text":"opts_DAM()\n\nImplements a Default ARTMAP learner's options.\n\nExamples\n\njulia> my_opts = opts_DAM()\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.opts_DDVFA","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.opts_DDVFA","text":"opts_DDVFA()\n\nDistributed Dual Vigilance Fuzzy ART options struct.\n\nExamples\n\njulia> opts_DDVFA()\nInitialized opts_DDVFA\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.opts_FAM","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.opts_FAM","text":"opts_FAM()\n\nImplements a Fuzzy ARTMAP learner's options.\n\nExamples\n\njulia> my_opts = opts_FAM()\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.opts_GNFA","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.opts_GNFA","text":"opts_GNFA()\n\nGamma-Normalized Fuzzy ART options struct.\n\nExamples\n\njulia> opts_GNFA()\nInitialized GNFA\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.opts_SFAM","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.opts_SFAM","text":"opts_SFAM()\n\nImplements a Simple Fuzzy ARTMAP learner's options.\n\nExamples\n\njulia> my_opts = opts_SFAM()\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveResonance.activation-Tuple{DAM,Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.activation","text":"activation(art::DAM, x, W)\n\nDefault ARTMAP's choice-by-difference activation function.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.activation-Tuple{SFAM,Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.activation","text":"activation(art::SFAM, x, W)\n\nReturns the activation value of the Simple Fuzzy ARTMAP module with weight W and sample x.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.activation_match!-Tuple{GNFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.activation_match!","text":"activation_match!(art::GNFA, x::Array)\n\nComputes the activationa and match functions of the art module against sample x.\n\nExamples\n\njulia> my_GNFA = GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\njulia> x, y = load_data()\njulia> train!(my_GNFA, x)\njulia> x_sample = x[:, 1]\njulia> activation_match!(my_GNFA, x_sample)\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.art_match-Tuple{DAM,Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.art_match","text":"art_match(art::DAM, x, W)\n\nReturns the match function for the Default ARTMAP module with weight W and sample x.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.art_match-Tuple{SFAM,Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.art_match","text":"art_match(art::SFAM, x, W)\n\nReturns the match function for the Simple Fuzzy ARTMAP module with weight W and sample x.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.classify-Tuple{DAM,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.classify","text":"classify(art::DAM, x)\n\nCategorize data 'x' using a trained Default ARTMAP module 'art'.\n\nExamples\n\njulia> x, y = load_data()\njulia> x_test, y_test = load_test_data()\njulia> art = DAM()\nDAM\n    opts: opts_DAM\n    ...\njulia> train!(art, x, y)\njulia> classify(art, x_test)\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.classify-Tuple{GNFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.classify","text":"classify(art::GNFA, x::Array)\n\nPredict categories of 'x' using the GNFA model.\n\nReturns predicted categories 'y_hat'\n\nExamples\n\njulia> my_GNFA = GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\njulia> x, y = load_data()\njulia> train!(my_GNFA, x)\njulia> y_hat = classify(my_GNFA, y)\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.classify-Tuple{SFAM,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.classify","text":"classify(art::SFAM, x)\n\nCategorize data 'x' using a trained Simple Fuzzy ARTMAP module 'art'.\n\nExamples\n\njulia> x, y = load_data()\njulia> x_test, y_test = load_test_data()\njulia> art = SFAM()\nSFAM\n    opts: opts_SFAM\n    ...\njulia> train!(art, x, y)\njulia> classify(art, x_test)\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.complement_code-Tuple{Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.complement_code","text":"complement_code(data)\n\nNormalize the data x to [0, 1] and returns the augmented vector [x, 1 - x].\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.element_min-Tuple{Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.element_min","text":"element_min(x::Array, W::Array)\n\nReturns the element-wise minimum between sample x and weight W.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.initialize!-Tuple{GNFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.initialize!","text":"initialize!()\n\nInitializes a GNFA learner with an intial sample 'x'\n\nExamples\n\njulia> my_GNFA = GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\njulia> initialize!(my_GNFA, [1 2 3 4])\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.learn!-Tuple{GNFA,Array,Int64}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.learn!","text":"learn(art::GNFA, x::Array, W::Array)\n\nIn place learning function with instance counting.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.learn-Tuple{DAM,Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.learn","text":"learn(art::DAM, x, W)\n\nReturns a single updated weight for the Simple Fuzzy ARTMAP module for weight vector W and sample x.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.learn-Tuple{GNFA,Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.learn","text":"learn(art::GNFA, x::Array, W::Array)\n\nReturn the modified weight of the art module conditioned by sample x.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.learn-Tuple{SFAM,Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.learn","text":"learn(art::SFAM, x, W)\n\nReturns a single updated weight for the Simple Fuzzy ARTMAP module for weight vector W and sample x.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.performance-Tuple{Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.performance","text":"performance(y_hat, y)\n\nReturns the categorization performance of y_hat against y.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.similarity-Tuple{String,GNFA,String,Array,AbstractFloat}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.similarity","text":"similarity(method, F2, field_name, gamma_ref)\n\nCompute the similarity metric depending on method with explicit comparisons for the field name.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.stopping_conditions-Tuple{DAM}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.stopping_conditions","text":"stopping_conditions(art::DAM)\n\nStopping conditions for Default ARTMAP, checked at the end of every epoch.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.stopping_conditions-Tuple{DDVFA}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.stopping_conditions","text":"stopping_conditions(art::DDVFA)\n\nStopping conditions for Distributed Dual Vigilance Fuzzy ARTMAP. Returns true if there is no change in weights during the epoch or the maxmimum epochs has been reached.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.stopping_conditions-Tuple{GNFA}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.stopping_conditions","text":"stopping_conditions(art::GNFA)\n\nStopping conditions for a GNFA module.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.stopping_conditions-Tuple{SFAM}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.stopping_conditions","text":"stopping_conditions(art::SFAM)\n\nStopping conditions for Simple Fuzzy ARTMAP, checked at the end of every epoch.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.train!-Tuple{DAM,Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.train!","text":"train(art::DAM, x, y)\n\nTrains a Default ARTMAP learner in a supervised manner.\n\nExamples\n\njulia> x, y = load_data()\njulia> art = DAM()\nDAM\n    opts: opts_DAM\n    ...\njulia> train!(art, x, y)\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.train!-Tuple{DDVFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.train!","text":"train!(ddvfa, data)\n\nTrain the DDVFA model on the data.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.train!-Tuple{GNFA,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.train!","text":"train!()\n\nTrains a GNFA learner with dataset 'x' and optional labels 'y'\n\nExamples\n\njulia> my_GNFA = GNFA()\nGNFA\n    opts: opts_GNFA\n    ...\njulia> x = load_data()\njulia> train!(my_GNFA, x)\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveResonance.train!-Tuple{SFAM,Array,Array}","page":"AdaptiveResonance.jl","title":"AdaptiveResonance.train!","text":"train(art::SFAM, x, y)\n\nTrains a Simple Fuzzy ARTMAP learner in a supervised manner.\n\nExamples\n\njulia> x, y = load_data()\njulia> art = SFAM()\nSFAM\n    opts: opts_SFAM\n    ...\njulia> train!(art, x, y)\n\n\n\n\n\n","category":"method"},{"location":"man/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"Here are some helpful examples of the usage of the module.","category":"page"},{"location":"man/examples/#Example-1:","page":"Examples","title":"Example 1:","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"art = DDVFA()","category":"page"},{"location":"man/examples/#Example-2:","page":"Examples","title":"Example 2:","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"art = SFAM()","category":"page"}]
}
